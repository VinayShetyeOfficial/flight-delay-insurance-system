generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  emailVerified          Boolean   @default(false)
  verificationToken      String?
  verificationTokenExpiry DateTime?
  image                  String?
  password               String
  phoneNumber            String?
  dateOfBirth            DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  accounts               Account[]
  sessions               Session[]
  bookings               Booking[]
  passwordResets         PasswordReset[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id           String   @id @default(cuid())
  userId       String
  price        Float
  totalPrice   Float      // Including add-ons and insurance
  currency     String
  status       BookingStatus
  insuranceType String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  insurance    Insurance?
  passengers   Passenger[]
  flight       Flight?
  addOns       AddOn[]
  payment      Payment?

  @@index([userId])
}

model Insurance {
  id           String   @id @default(cuid())
  bookingId    String   @unique
  coverageType String
  price        Float
  terms        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  claim        Claim?
}

model Claim {
  id           String   @id @default(cuid())
  insuranceId  String   @unique
  status       String
  reason       String
  amount       Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  insurance    Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   // Will store hashed token
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

enum PassengerType {
  ADULT
  CHILD
  INFANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Passenger {
  id              String        @id @default(cuid())
  bookingId       String
  passengerType   PassengerType
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          Gender
  passportNumber  String?
  nationality     String?
  accompaniedBy   String?       // Reference to adult passenger ID
  mealPreference  String?
  seatPreference  String?
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model Flight {
  id              String   @id @default(cuid())
  bookingId       String   @unique
  airlineCode     String
  flightNumber    String
  aircraft        String?
  cabinClass      String
  departureTime   DateTime
  arrivalTime     DateTime
  origin          String
  destination     String
  originTerminal  String?
  destTerminal    String?
  duration        Int      // in minutes
  price           Float
  currency        String
  booking         Booking  @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}

model AddOn {
  id          String   @id @default(cuid())
  bookingId   String
  name        String
  description String?
  price       Float
  currency    String
  booking     Booking  @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}

enum BookingStatus {
  INITIATED
  PAYMENT_PENDING
  PAYMENT_FAILED
  CONFIRMED
  CANCELLED
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String       @unique
  amount        Float
  currency      String
  status        PaymentStatus
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

